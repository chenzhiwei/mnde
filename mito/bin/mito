#!/usr/bin/env bash
# shellcheck shell=bash

set -eu -o pipefail

MITO_DIR=/opt/mito
MITO_BIN_DIR=/opt/mito/bin
MITO_COMPLETION_DIR=/opt/mito/etc/bash_completion.d

cmd=${1-}
pkgname=${2-}

function common::precheck() {
    local flag=0
    for cmd in curl jq unxz unzip; do
        if ! type $cmd &>/dev/null; then
            echo "$cmd is not installed"
            flag=1
        fi
    done

    if [[ $flag -eq 1 ]]; then
        exit 0
    fi
}

function common::latest_version() {
    local project=$1
    local version=$(curl -sSL https://api.github.com/repos/$project/releases/latest | jq -r .tag_name)
    echo $version
}

function uv() {
    curl -L https://github.com/astral-sh/uv/releases/latest/download/uv-x86_64-unknown-linux-gnu.tar.gz \
        | tar -xz --strip=1 --directory=$MITO_BIN_DIR uv-x86_64-unknown-linux-gnu/{uv,uvx}
    $MITO_BIN_DIR/uv generate-shell-completion bash > $MITO_COMPLETION_DIR/uv
}

function ruff() {
    curl -L https://github.com/astral-sh/ruff/releases/latest/download/ruff-x86_64-unknown-linux-gnu.tar.gz \
        | tar -xz --strip=1 --directory=$MITO_BIN_DIR ruff-x86_64-unknown-linux-gnu/ruff
    $MITO_BIN_DIR/ruff generate-shell-completion bash > $MITO_COMPLETION_DIR/ruff
}

function helm() {
    local version=$(common::latest_version helm/helm)
    curl -L https://get.helm.sh/helm-$version-linux-amd64.tar.gz \
        | tar -xz --strip=1 --directory=$MITO_BIN_DIR linux-amd64/helm
    $MITO_BIN_DIR/helm completion bash > $MITO_COMPLETION_DIR/helm
}

function kubectl() {
    local version=$(curl -sSL https://dl.k8s.io/release/stable.txt)
    curl -L -o $MITO_BIN_DIR/kubectl https://dl.k8s.io/release/$version/bin/linux/amd64/kubectl
    chmod +x $MITO_BIN_DIR/kubectl
    $MITO_BIN_DIR/kubectl completion bash > $MITO_COMPLETION_DIR/kubectl
}

function kind() {
    curl -L -o $MITO_BIN_DIR/kind https://github.com/kubernetes-sigs/kind/releases/latest/download/kind-linux-amd64
    chmod +x $MITO_BIN_DIR/kind
    $MITO_BIN_DIR/kind completion bash > $MITO_COMPLETION_DIR/kind
}

function kubebuilder() {
    curl -L -o $MITO_BIN_DIR/kubebuilder https://github.com/kubernetes-sigs/kubebuilder/releases/latest/download/kubebuilder-linux-amd64
    chmod +x $MITO_BIN_DIR/kubebuilder
    $MITO_BIN_DIR/kubebuilder completion bash > $MITO_COMPLETION_DIR/kubebuilder
}

function yq() {
    curl -L -o $MITO_BIN_DIR/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
    chmod +x $MITO_BIN_DIR/yq
    $MITO_BIN_DIR/yq completion bash > $MITO_COMPLETION_DIR/yq
}

function certctl() {
    curl -L -o $MITO_BIN_DIR/certctl https://github.com/chenzhiwei/certctl/releases/latest/download/certctl
    chmod +x $MITO_BIN_DIR/certctl
    $MITO_BIN_DIR/certctl completion bash > $MITO_COMPLETION_DIR/certctl
}

function go() {
    local version=$(curl -sSL https://golang.google.cn/VERSION?m=text|head -1)
    local dir=$MITO_DIR/go
    mkdir -p $dir
    curl -L https://golang.google.cn/dl/$version.linux-amd64.tar.gz \
        | tar -xz --strip=1 --directory=$dir
}

function node() {
    local version=$(curl -sSL https://mirrors.aliyun.com/nodejs-release/index.tab | awk 'NR==2 {print $1}')
    local dir=$MITO_DIR/node
    mkdir -p $dir
    curl -L https://mirrors.aliyun.com/nodejs-release/$version/node-$version-linux-x64.tar.xz \
        | tar -xJ --strip=1 --directory=$dir
}

function rust() {
    curl -sSf https://sh.rustup.rs | RUSTUP_HOME=/opt/mito/rustup CARGO_HOME=/opt/mito/cargo sh -s -- -y
    /opt/mito/cargo/bin/rustup completions bash > $MITO_COMPLETION_DIR/rustup
}

case $cmd in
    install)
        common::precheck
        $pkgname
        ;;
    *)
        echo "mito install pkg"
        ;;
esac
